name: Jalankan Bash dari Repo Publik

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */4 * * *'  # Setiap 4 jam

jobs:
  run:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout repo dengan history penuh
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ambil seluruh history git

      # 2. Debug: List directory sebelum eksekusi
      - name: Debug - Struktur Direktori Awal
        run: |
          echo "### Struktur Direktori Awal ###"
          ls -R
          echo "##############################"

      # 3. Setup environment dengan error handling
      - name: Setup Environment
        run: |
          echo "üîÑ Menginstall dependencies..."
          sudo apt-get update && sudo apt-get install -y jq || {
            echo "‚ùå Gagal install jq";
            exit 1;
          }
          pip install -U yt-dlp || {
            echo "‚ùå Gagal install yt-dlp";
            exit 1;
          }
          mkdir -p out
          echo "‚úÖ Environment siap"

      # 4. Clone repo private dengan status check
      - name: Ambil File dari Repo Privat
        run: |
          echo "üîí Mengakses repo private..."
          if ! git clone https://x-access-token:${{ secrets.TOKEN_PRIVATE }}@github.com/${{ secrets.REPO_PRIVATE }} private; then
            echo "‚ö†Ô∏è Gagal clone repo private, melanjutkan tanpa file..."
          else
            [ -f private/cookies.txt ] && cp private/cookies.txt $HOME/cookies2.txt
            [ -f private/urls.txt ] && cp private/urls.txt $HOME/urls.txt
            echo "‚úÖ File private diambil"
          fi

      # 5. Jalankan skrip utama dengan logging
      - name: Jalankan Skrip bash1.sh
        run: |
          echo "üèÉ‚Äç‚ôÇÔ∏è Menjalankan bash1.sh..."
          chmod +x bash1.sh
          if ! ./bash1.sh; then
            echo "‚ùå bash1.sh gagal dengan exit code $?"
            echo "=== DEBUG OUTPUT ==="
            [ -f logs.txt ] && cat logs.txt
            exit 1
          fi
          echo "‚úÖ bash1.sh selesai"

      # 6. Debug: List directory setelah eksekusi
      - name: Debug - Struktur Direktori Setelah Eksekusi
        run: |
          echo "### Struktur Direktori Setelah Run ###"
          ls -R
          echo "##############################"
          echo "### File .txt yang ditemukan ###"
          find . -name "*.txt" -not -path "./.git/*"
          echo "##############################"

      # 7. Commit dan Push dengan robust checking
      - name: Commit dan Push Perubahan
        run: |
          echo "üîç Memeriksa perubahan..."
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git remote -v
          
          # Update branch
          git fetch origin
          git reset --hard origin/master || {
            echo "‚ùå Gagal reset branch";
            exit 1;
          }

          # Add all .txt files
          find . -name "*.txt" -not -path "./.git/*" -exec git add {} +
          
          # Debug status sebelum commit
          echo "=== STATUS GIT ==="
          git status
          echo "================"

          if git diff --cached --quiet; then
            echo "‚ÑπÔ∏è Tidak ada perubahan untuk di-commit"
          else
            echo "üíæ Membuat commit..."
            git commit -m "Auto-update: $(date '+%Y-%m-%d %H:%M:%S')" || {
              echo "‚ùå Gagal membuat commit";
              exit 1;
            }
            
            echo "üöÄ Mencoba push..."
            if git push origin master; then
              echo "‚úÖ Push berhasil"
            else
              echo "‚ùå Gagal push, mencoba force push..."
              git push --force-with-lease origin master || {
                echo "‚ùå Gagal force push";
                exit 1;
              }
            fi
          fi
